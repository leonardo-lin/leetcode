# -*- coding: utf-8 -*-
"""
Created on Sat Feb 20 22:49:33 2021

@author: leo
"""
class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        """hi=[[[]]]*10
        wid=[[[]]]*10
        box=[[[]]]*10       
        i=j=0
        print(wid)
        #wid[2].append(10)
        #wid[1].append(9)
        
        while(i<=9):
            while(j<=9):
                if board[i][j]!=".":
                    wid[0][i].append(board[i][j])
                    hi[0][j].append(board[i][j])
                    box[0][(i//3)+((j//3)*2)].append(board[i][j])
                j+=1
            i+=1
        k=[[[]]]*3
        k[0].append(0)
        print(k)
        k[0][0].append(1)
        print(k)
        print(k[1][0][0])
        #print(hi)
        print(wid)
        #print(box)
        return True"""
        print(board)
        #print(int(board[0][0]))
        hi= [[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]
        wid=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]
        box=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]
        i=j=0
        while(i<9):
            j=0
            while(j<9):
                if board[i][j]!=".":
                    if wid[i][int(board[i][j])]==1:
                        #print('in1',i,j)
                        return False
                    wid[i][int(board[i][j])]=1
                    if hi[j][int(board[i][j])]==1:
                        #print('in2',i,j)
                        return False
                    hi[j][int(board[i][j])]=1
                    if box[(j//3)+((i//3)*3)][int(board[i][j])]==1:
                        #print('in3',i,j)
                        #print(box)
                        #print((j//3)+((i//3)*3))
                        return False
                    box[(j//3)+((i//3)*3)][int(board[i][j])]=1
                j+=1
            i+=1
           
        
        return True
        
        
        
        
        
def main():
    side= Solution
    #print(p=='apple')
    #print(side.strStr(side,'hello','ll'))
    print(side.isValidSudoku(side,[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]))
    

if __name__ == "__main__":
    main()